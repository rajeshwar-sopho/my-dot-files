(()=>{var e,t={9315:(e,t,n)=>{const r=n(6516),a=n(504),o=n(2306),i=n(2329),l=n(8950),c=n(3899),s=n(3212),u=n(2221),f=n(4410),m=n(2492),p=n(5744),d=n(6231),b=n(9503),h=n(3682),v=n(3588),g=n(5969),y=n(5923),w=n(3413),E=n(971),S=n(330),x=n(9245),k=n(2827),N=n(3961),O=n(1859),C=n(3870),R=n(7625),T=n(9332),P=n(7017),j=n(9433),A=n(6652),I=n(7457),_=n(542),L=n(8812),V=n(623),H=n(7536),B=n(9789),D=n(8301),M=n(1716),X=n(2782),F=n(4563),z=n(9730);e.exports={parse:l,valid:c,clean:s,inc:u,diff:f,major:m,minor:p,patch:d,prerelease:b,compare:h,rcompare:v,compareLoose:g,compareBuild:y,sort:w,rsort:E,gt:S,lt:x,eq:k,neq:N,gte:O,lte:C,cmp:R,coerce:T,Comparator:P,Range:j,satisfies:A,toComparators:I,maxSatisfying:_,minSatisfying:L,minVersion:V,validRange:H,outside:B,gtr:D,ltr:M,intersects:X,simplifyRange:F,subset:z,SemVer:o,re:r.re,src:r.src,tokens:r.t,SEMVER_SPEC_VERSION:a.SEMVER_SPEC_VERSION,RELEASE_TYPES:a.RELEASE_TYPES,compareIdentifiers:i.compareIdentifiers,rcompareIdentifiers:i.rcompareIdentifiers}},6970:(e,t,n)=>{"use strict";var r=n(224),a=n(7810),o=n(1932),i=n(4104),l=n(1580),c=n(5464),s=n(5517),u=n(4560),f=n(958),m=n(8824),p=n(4089),d=(0,u.AH)({width:120,marginLeft:5}),b=(0,u.AH)({width:120,marginLeft:5}),h=(0,u.AH)({marginTop:0,marginBottom:0,marginLeft:0,marginRight:4}),v=(0,u.AH)({marginTop:0,marginBottom:0,marginLeft:0,marginRight:0}),g=(0,u.AH)({marginLeft:8,marginRight:4,marginTop:"auto",marginBottom:"auto"}),y=(0,u.AH)({display:"flex",alignContent:"flex-start"});const w=function(e){var t=e.initialPrefs,n=e.onClose,o=e.onApply,w=e.onSubmit;r.Rm.debug("PreferencesModal: initialPrefs: ",t);var E=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i}((0,a.useState)(t),2),S=E[0],x=E[1],k=function(e){e.keyCode===l.wq?(e.preventDefault(),n()):e.keyCode===l.Ri&&N(e)},N=function(e){e.preventDefault(),w(S)},O=function(e){x(f.pm.update(S,e))},C=Object.keys(s.Z).map((function(e){return a.createElement("option",{key:e,value:e},e)})),R=a.createElement("select",{className:d,name:"theme",value:S.theme,onChange:function(e){O({theme:e.target.value})}},C),T=Object.keys(m.Y).map((function(e){return a.createElement("option",{key:e,value:e},e)})),P=a.createElement("select",{className:d,name:"layout",value:S.layout,onChange:function(e){O({layout:e.target.value})}},T),j=(0,p.Th)(S.fontScaleFactor),A=p.vX.map((function(e){return a.createElement("option",{key:e.toString(),value:e},e.toString())})),I=a.createElement("select",{className:b,name:"fontSize",value:j,onChange:function(e){var t=(0,p.B_)(Number.parseInt(e.target.value));O({fontScaleFactor:t})}},A),_=i.Px;return a.createElement(c.lG,{className:i.Tp,title:"Tabli Preferences",onClose:n},a.createElement(c.nB,null,a.createElement("div",{className:i.j$},a.createElement("form",{className:i.zW,onSubmit:N},a.createElement("div",{className:i.KM},a.createElement("div",{className:(0,u.cx)("checkbox",_,y)},a.createElement("input",{type:"checkbox",className:g,checked:S.popoutOnStart,onChange:function(e){O({popoutOnStart:!S.popoutOnStart})}}),a.createElement("label",{className:v},"Show Tabli popout window at startup")),a.createElement("div",{className:(0,u.cx)("checkbox",_,y)},a.createElement("input",{type:"checkbox",className:g,checked:S.dedupeTabs,onChange:function(){O({dedupeTabs:!S.dedupeTabs})}}),a.createElement("label",{className:v},"Automatically close duplicate tabs")),a.createElement("div",{className:(0,u.cx)("checkbox",_,y)},a.createElement("input",{type:"checkbox",className:g,checked:S.revertOnOpen,onChange:function(e){O({revertOnOpen:!S.revertOnOpen})}}),a.createElement("label",{className:v},"Only re-open saved tabs when re-opening saved windows")),a.createElement("div",null),a.createElement("div",null),a.createElement("div",{className:i.XX},a.createElement("label",{className:h},"Theme")),R,a.createElement("div",{className:i.XX},a.createElement("label",{className:h},"Layout")),P,a.createElement("div",{className:i.XX},a.createElement("label",{className:h},"Font Size")),I)),a.createElement("hr",null),a.createElement("div",{className:i.px},a.createElement("button",{type:"button",className:"btn btn-default btn-light tabli-dialog-button",onClick:function(e){!function(e){e.preventDefault(),o(t)}(e),n()},tabIndex:0},"Cancel"),a.createElement("button",{type:"button",className:"btn btn-info tabli-dialog-button",onClick:function(e){e.preventDefault(),o(S)},tabIndex:0,onKeyDown:k},"Apply"),a.createElement("button",{type:"button",className:"btn btn-primary btn-default tabli-dialog-button",onClick:N,tabIndex:0,onKeyDown:k},"OK")))))};var E=n(5095),S=n(4177),x=n.n(S),k=n(9926),N=n(5930),O=n.n(N),C=n(1291),R=n.n(C),T=(n(9315),n(5043)),P=n(709),j=n(1680),A=n.n(j),I=n(6146),_=n.n(I),L={throttle:A(),mapValues:_()},V=(L.throttle((function(){var e=L.mapValues(null,(function(e){return e.clearChromeSessionId()})),t={savedWindowStateVersion:1,savedWindowState:JSON.stringify(e,null,2)};chrome.storage.local.set(t,(function(){r.Rm.debug((new Date).toString()+" succesfully wrote window state")}))}),3e4),n(4455),n(3786),function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function l(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}c((r=r.apply(e,t||[])).next())}))}),H=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&l[0]?r.return:l[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,l[1])).done)return a;switch(r=0,a&&(l=[2&l[0],a.value]),l[0]){case 0:case 1:a=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!a||l[1]>a[0]&&l[1]<a[3])){i.label=l[1];break}if(6===l[0]&&i.label<a[1]){i.label=a[1],a=l;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(l);break}a[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],r=0}finally{n=a=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}},B=(O(),R(),(0,r.tZ)("chrome-events"));function D(){return V(this,void 0,void 0,(function(){var e,t;return H(this,(function(n){switch(n.label){case 0:return[4,chrome.storage.session.get("stateSnapshot")];case 1:return e=n.sent(),r.Rm.debug("readSnapStateStr: items: ",e),e&&(t=e.stateSnapshot)?[2,t]:[2,null]}}))}))}function M(){return V(this,void 0,void 0,(function(){var e,t;return H(this,(function(n){switch(n.label){case 0:return r.Rm.debug("loadSnapState: attempting to load state snapshot from session storage...:"),[4,D()];case 1:return(e=n.sent())?(t=JSON.parse(e),r.Rm.debug("loadSnapState: read from session storage: ",t),[2,(0,k.mkRef)(T.Ay.deserialize(t))]):[2,null]}}))}))}P.He(B);var X=n(4140),F=function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function l(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}c((r=r.apply(e,t||[])).next())}))},z=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&l[0]?r.return:l[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,l[1])).done)return a;switch(r=0,a&&(l=[2&l[0],a.value]),l[0]){case 0:case 1:a=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!a||l[1]>a[0]&&l[1]<a[3])){i.label=l[1];break}if(6===l[0]&&i.label<a[1]){i.label=a[1],a=l;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(l);break}a[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],r=0}finally{n=a=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}},G=x(),K=function(){return F(void 0,void 0,void 0,(function(){var e;return z(this,(function(t){switch(t.label){case 0:return r.Rm.debug("onClose"),[4,G.tabs.getCurrent()];case 1:return e=t.sent(),r.Rm.debug("onClose tab: ",e),e.id&&chrome.tabs.remove([e.id]),[2]}}))}))},Y=function(e,t){return F(void 0,void 0,void 0,(function(){return z(this,(function(n){switch(n.label){case 0:return[4,E.SF(t,e)];case 1:return n.sent(),[2]}}))}))};(0,o.YT)(),window.onload=function(){return F(void 0,void 0,void 0,(function(){var e,t,n,o,i,l;return z(this,(function(c){switch(c.label){case 0:return c.trys.push([0,2,,3]),[4,M()];case 1:return(e=c.sent())?(t=e,n=(0,k.mutableGet)(t),o=document.getElementById("prefsContent"),i=a.createElement(w,{onClose:K,initialPrefs:n.preferences,onApply:function(e){return Y(t,e)},onSubmit:function(e){return n=t,r=e,F(void 0,void 0,void 0,(function(){return z(this,(function(e){switch(e.label){case 0:return[4,Y(n,r)];case 1:return e.sent(),[4,K()];case 2:return e.sent(),[2]}}))}));var n,r}}),(0,X.H)(o).render(i),[3,3]):(r.Rm.error("prefsPage: could not load snap state from session storage -- exiting"),[2]);case 2:throw l=c.sent(),r.Rm.error("caught exception rendering preferences page:"),r.Rm.error(l.stack),l;case 3:return[2]}}))}))}}},n={};function r(e){var a=n[e];if(void 0!==a)return a.exports;var o=n[e]={id:e,loaded:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.m=t,e=[],r.O=(t,n,a,o)=>{if(!n){var i=1/0;for(u=0;u<e.length;u++){for(var[n,a,o]=e[u],l=!0,c=0;c<n.length;c++)(!1&o||i>=o)&&Object.keys(r.O).every((e=>r.O[e](n[c])))?n.splice(c--,1):(l=!1,o<i&&(i=o));if(l){e.splice(u--,1);var s=a();void 0!==s&&(t=s)}}return t}o=o||0;for(var u=e.length;u>0&&e[u-1][2]>o;u--)e[u]=e[u-1];e[u]=[n,a,o]},r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),r.j=3,(()=>{var e={3:0};r.O.j=t=>0===e[t];var t=(t,n)=>{var a,o,[i,l,c]=n,s=0;if(i.some((t=>0!==e[t]))){for(a in l)r.o(l,a)&&(r.m[a]=l[a]);if(c)var u=c(r)}for(t&&t(n);s<i.length;s++)o=i[s],r.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return r.O(u)},n=self.webpackChunktabli=self.webpackChunktabli||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=r.O(void 0,[0],(()=>r(6970)));a=r.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,