(()=>{"use strict";var e,n={5040:(e,n,t)=>{var r=t(224),o=t(6069),i=function(e,n,t,r){return new(t||(t=Promise))((function(o,i){function u(e){try{l(r.next(e))}catch(e){i(e)}}function a(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(u,a)}l((r=r.apply(e,n||[])).next())}))},u=function(e,n){var t,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(l){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(u=0)),u;)try{if(t=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return u.label++,{value:a[1],done:!1};case 5:u.label++,r=a[1],a=[0];continue;case 7:a=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){u=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){u.label=a[1];break}if(6===a[0]&&u.label<o[1]){u.label=o[1],o=a;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(a);break}o[2]&&u.ops.pop(),u.trys.pop();continue}a=n.call(e,u)}catch(e){a=[6,e],r=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};function a(){return i(this,void 0,void 0,(function(){var e;return u(this,(function(n){switch(n.label){case 0:return[4,chrome.runtime.sendMessage({action:"getPopoutWindowId"})];case 1:return e=n.sent(),r.Rm.debug("getPopoutWindowId: got response: ",e),[2,e.windowId]}}))}))}!function(){i(this,void 0,void 0,(function(){var e;return u(this,(function(n){switch(n.label){case 0:return[4,a()];case 1:return e=n.sent(),r.Rm.debug("renderPopup: popoutWindowId: ",e),e!==chrome.windows.WINDOW_ID_NONE&&(r.Rm.debug("popout window found, closing popup"),window.close(),chrome.windows.update(e,{focused:!0})),o.H(!1,!0),[2]}}))}))}()}},t={};function r(e){var o=t[e];if(void 0!==o)return o.exports;var i=t[e]={id:e,loaded:!1,exports:{}};return n[e].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}r.m=n,e=[],r.O=(n,t,o,i)=>{if(!t){var u=1/0;for(s=0;s<e.length;s++){for(var[t,o,i]=e[s],a=!0,l=0;l<t.length;l++)(!1&i||u>=i)&&Object.keys(r.O).every((e=>r.O[e](t[l])))?t.splice(l--,1):(a=!1,i<u&&(u=i));if(a){e.splice(s--,1);var c=o();void 0!==c&&(n=c)}}return n}i=i||0;for(var s=e.length;s>0&&e[s-1][2]>i;s--)e[s]=e[s-1];e[s]=[t,o,i]},r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),r.j=6,(()=>{var e={6:0};r.O.j=n=>0===e[n];var n=(n,t)=>{var o,i,[u,a,l]=t,c=0;if(u.some((n=>0!==e[n]))){for(o in a)r.o(a,o)&&(r.m[o]=a[o]);if(l)var s=l(r)}for(n&&n(t);c<u.length;c++)i=u[c],r.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return r.O(s)},t=self.webpackChunktabli=self.webpackChunktabli||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))})();var o=r.O(void 0,[0],(()=>r(5040)));o=r.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,